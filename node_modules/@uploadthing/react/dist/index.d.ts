import * as react_jsx_runtime from 'react/jsx-runtime';
import { StyleField, ContentField } from 'uploadthing/client';
import { FileRouter, ErrorMessage } from 'uploadthing/server';
import { U as UploadthingComponentProps } from './types-53829221.js';
export { E as EndpointMetadata } from './types-53829221.js';
export { A as AcceptProp, D as DropEvent, f as DropzoneInputProps, d as DropzoneMethods, b as DropzoneOptions, e as DropzoneRootProps, c as DropzoneState, F as FileError, a as FileRejection } from './types-f6db134c.js';
export { FileWithPath } from 'file-selector';
import '@uploadthing/shared';

type DropzoneStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
    isDragActive: boolean;
};
type UploadDropzoneProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = UploadthingComponentProps<TRouter, TEndpoint> & {
    appearance?: {
        container?: StyleField<DropzoneStyleFieldCallbackArgs>;
        uploadIcon?: StyleField<DropzoneStyleFieldCallbackArgs>;
        label?: StyleField<DropzoneStyleFieldCallbackArgs>;
        allowedContent?: StyleField<DropzoneStyleFieldCallbackArgs>;
        button?: StyleField<DropzoneStyleFieldCallbackArgs>;
    };
    content?: {
        uploadIcon?: ContentField<DropzoneStyleFieldCallbackArgs>;
        label?: ContentField<DropzoneStyleFieldCallbackArgs>;
        allowedContent?: ContentField<DropzoneStyleFieldCallbackArgs>;
        button?: ContentField<DropzoneStyleFieldCallbackArgs>;
    };
    className?: string;
    config?: {
        mode?: "auto" | "manual";
        appendOnPaste?: boolean;
    };
};
declare function UploadDropzone<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadDropzoneProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

type ButtonStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
};
type UploadButtonProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = UploadthingComponentProps<TRouter, TEndpoint> & {
    appearance?: {
        container?: StyleField<ButtonStyleFieldCallbackArgs>;
        button?: StyleField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: StyleField<ButtonStyleFieldCallbackArgs>;
        clearBtn?: StyleField<ButtonStyleFieldCallbackArgs>;
    };
    content?: {
        button?: ContentField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: ContentField<ButtonStyleFieldCallbackArgs>;
        clearBtn?: ContentField<ButtonStyleFieldCallbackArgs>;
    };
    className?: string;
    config?: {
        appendOnPaste?: boolean;
        mode?: "auto" | "manual";
    };
};
/**
 * @example
 * <UploadButton<OurFileRouter>
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
declare function UploadButton<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadButtonProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

declare function Uploader<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadthingComponentProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;
declare function generateComponents<TRouter extends FileRouter>(initOpts?: {
    /**
     * URL to the UploadThing API endpoint
     * @example "/api/uploadthing"
     * @example "https://www.example.com/api/uploadthing"
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
}): {
    UploadButton: <TEndpoint extends keyof TRouter>(props: Omit<FileRouter extends TRouter ? "You forgot to pass the generic" : UploadButtonProps<TRouter, TEndpoint>, "url">) => react_jsx_runtime.JSX.Element;
    UploadDropzone: <TEndpoint_1 extends keyof TRouter>(props: Omit<FileRouter extends TRouter ? "You forgot to pass the generic" : UploadDropzoneProps<TRouter, TEndpoint_1>, "url">) => react_jsx_runtime.JSX.Element;
    Uploader: <TEndpoint_2 extends keyof TRouter>(props: Omit<FileRouter extends TRouter ? "You forgot to pass the generic" : UploadthingComponentProps<TRouter, TEndpoint_2>, "url">) => react_jsx_runtime.JSX.Element;
};

export { UploadButton, UploadDropzone, Uploader, UploadthingComponentProps, generateComponents };
