import type { ComponentProps } from "react";
import type { ErrorMessage, FileRouter } from "uploadthing/server";
import { UploadButton } from "./components/button";
import { UploadDropzone } from "./components/dropzone";
import type { UploadthingComponentProps } from "./types";
export declare function Uploader<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadthingComponentProps<TRouter, TEndpoint>): import("react/jsx-runtime").JSX.Element;
export declare function generateComponents<TRouter extends FileRouter>(initOpts?: {
    /**
     * URL to the UploadThing API endpoint
     * @example "/api/uploadthing"
     * @example "https://www.example.com/api/uploadthing"
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
}): {
    UploadButton: <TEndpoint extends keyof TRouter>(props: Omit<FileRouter extends TRouter ? "You forgot to pass the generic" : import("./components/button").UploadButtonProps<TRouter, TEndpoint>, "url">) => import("react/jsx-runtime").JSX.Element;
    UploadDropzone: <TEndpoint_1 extends keyof TRouter>(props: Omit<FileRouter extends TRouter ? "You forgot to pass the generic" : import("./components/dropzone").UploadDropzoneProps<TRouter, TEndpoint_1>, "url">) => import("react/jsx-runtime").JSX.Element;
    Uploader: <TEndpoint_2 extends keyof TRouter>(props: Omit<FileRouter extends TRouter ? "You forgot to pass the generic" : UploadthingComponentProps<TRouter, TEndpoint_2>, "url">) => import("react/jsx-runtime").JSX.Element;
};
export { UploadButton, UploadDropzone };
//# sourceMappingURL=component.d.ts.map