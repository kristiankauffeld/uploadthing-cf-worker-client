"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tw.ts
var tw_exports = {};
__export(tw_exports, {
  withUt: () => withUt
});
module.exports = __toCommonJS(tw_exports);
var import_plugin = __toESM(require("tailwindcss/plugin"));
function withUt(twConfig) {
  const contentPaths = [
    "./node_modules/@uploadthing/react/dist/**",
    "./node_modules/@uploadthing/solid/dist/**"
  ];
  if (Array.isArray(twConfig.content)) {
    twConfig.content.push(...contentPaths);
  } else {
    twConfig.content.files.push(...contentPaths);
  }
  const utPlugin = (0, import_plugin.default)(({ addVariant }) => {
    addVariant("ut-button", '&>*[data-ut-element="button"]');
    addVariant("ut-allowed-content", '&>*[data-ut-element="allowed-content"]');
    addVariant("ut-label", '&>*[data-ut-element="label"]');
    addVariant("ut-upload-icon", '&>*[data-ut-element="upload-icon"]');
    addVariant("ut-clear-btn", '&>*[data-ut-element="clear-btn"]');
    addVariant("ut-readying", '&[data-state="readying"]');
    addVariant("ut-ready", '&[data-state="ready"]');
    addVariant("ut-uploading", '&[data-state="uploading"]');
  });
  if (!twConfig.plugins) {
    twConfig.plugins = [];
  }
  twConfig.plugins.push(utPlugin);
  return twConfig;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  withUt
});
//# sourceMappingURL=tw.js.map