import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  defaultErrorFormatter
} from "./chunk-TX4EGJ4S.mjs";
import "./chunk-4PDGVH57.mjs";

// src/h3.ts
import {
  assertMethod,
  defineEventHandler,
  getRequestHeaders,
  getRequestURL,
  readBody,
  setHeaders,
  setResponseStatus
} from "h3";
import { getStatusCodeFromError, UploadThingError } from "@uploadthing/shared";
var createUploadthing = (opts) => createBuilder(opts);
var createH3EventHandler = (opts) => {
  const requestHandler = buildRequestHandler(opts);
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  return defineEventHandler(async (event) => {
    var _a;
    assertMethod(event, ["GET", "POST"]);
    setHeaders(event, { "x-uploadthing-version": UPLOADTHING_VERSION });
    if (event.method === "GET") {
      return getBuildPerms();
    }
    const response = await requestHandler({
      req: {
        url: getRequestURL(event).href,
        headers: getRequestHeaders(event),
        json: () => Promise.resolve(readBody(event))
      },
      event
    });
    if (response instanceof UploadThingError) {
      setResponseStatus(event, getStatusCodeFromError(response));
      const errorFormatter = ((_a = opts.router[Object.keys(opts.router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;
      return errorFormatter(response);
    }
    if (response.status !== 200) {
      setResponseStatus(event, 500);
      return "An unknown error occurred";
    }
    return response.body;
  });
};
export {
  createH3EventHandler,
  createUploadthing
};
//# sourceMappingURL=h3.mjs.map