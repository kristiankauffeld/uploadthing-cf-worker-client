{"version":3,"sources":["../src/internal/get-full-api-url.ts"],"sourcesContent":["/*\n * Returns a full URL to the dev's uploadthing endpoint\n * Can take either an origin, or a pathname, or a full URL\n * and will return the \"closest\" url matching the default\n * `<VERCEL_URL || localhost>/api/uploadthing`\n */\nexport function getFullApiUrl(maybeUrl?: string): URL {\n  const base = (() => {\n    if (typeof window !== \"undefined\") {\n      return window.location.origin;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof process !== \"undefined\" && process?.env?.VERCEL_URL) {\n      return `https://${process.env.VERCEL_URL}`;\n    }\n\n    // @ts-expect-error - import meta is not defined in node\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (import.meta.env?.VERCEL_URL) {\n      // @ts-expect-error - import meta is not defined in node\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return `https://${import.meta.env.VERCEL_URL}`;\n    }\n\n    return \"http://localhost:3000\";\n  })();\n\n  try {\n    const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n    if (url.pathname === \"/\") {\n      url.pathname = \"/api/uploadthing\";\n    }\n    return url;\n  } catch (err) {\n    throw new Error(\n      `Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`,\n    );\n  }\n}\n"],"mappings":";AAMO,SAAS,cAAc,UAAwB;AACpD,QAAM,QAAQ,MAAM;AAPtB;AAQI,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,OAAO,SAAS;AAAA,IACzB;AAGA,QAAI,OAAO,YAAY,iBAAe,wCAAS,QAAT,mBAAc,aAAY;AAC9D,aAAO,WAAW,QAAQ,IAAI;AAAA,IAChC;AAIA,SAAI,iBAAY,QAAZ,mBAAiB,YAAY;AAG/B,aAAO,WAAW,YAAY,IAAI;AAAA,IACpC;AAEA,WAAO;AAAA,EACT,GAAG;AAEH,MAAI;AACF,UAAM,MAAM,IAAI,IAAI,YAAY,oBAAoB,IAAI;AACxD,QAAI,IAAI,aAAa,KAAK;AACxB,UAAI,WAAW;AAAA,IACjB;AACA,WAAO;AAAA,EACT,SAAS,KAAP;AACA,UAAM,IAAI;AAAA,MACR,oBAAoB;AAAA,IACtB;AAAA,EACF;AACF;","names":[]}