import {
  incompatibleNodeGuard
} from "./chunk-WPSY3MFJ.mjs";
import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  formatError
} from "./chunk-TX4EGJ4S.mjs";
import "./chunk-4PDGVH57.mjs";

// src/fastify.ts
import { getStatusCodeFromError, UploadThingError } from "@uploadthing/shared";
var createUploadthing = (opts) => createBuilder(opts);
var fastifyUploadthingPlugin = (fastify, opts, done) => {
  incompatibleNodeGuard();
  const requestHandler = buildRequestHandler(opts);
  const POST = async (req, res) => {
    const proto = req.headers["x-forwarded-proto"] ?? "http";
    const url = new URL(req.url, `${proto}://${req.headers.host}`);
    const response = await requestHandler({
      req: Object.assign(req, {
        json: () => Promise.resolve(req.body)
      }),
      url,
      res
    });
    if (response instanceof UploadThingError) {
      void res.status(getStatusCodeFromError(response)).headers({
        "x-uploadthing-version": UPLOADTHING_VERSION
      }).send(formatError(response, opts.router));
      return;
    }
    if (response.status !== 200) {
      void res.status(500).headers({
        "x-uploadthing-version": UPLOADTHING_VERSION
      }).send("An unknown error occured");
      return;
    }
    void res.status(response.status).headers({
      "x-uploadthing-version": UPLOADTHING_VERSION
    }).send(response.body);
  };
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  const GET = async (req, res) => {
    void res.status(200).headers({
      "x-uploadthing-version": UPLOADTHING_VERSION
    }).send(getBuildPerms());
  };
  fastify.post("/api/uploadthing", POST).get("/api/uploadthing", GET);
  done();
};
export {
  createUploadthing,
  fastifyUploadthingPlugin
};
//# sourceMappingURL=fastify.mjs.map